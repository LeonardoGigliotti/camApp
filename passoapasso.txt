npm i -g @ionic/cli
===================
ionic start camApp blank --type=angular
Selecionar a opcao = NgModules
=========
cd camApp
code .
======
npm install @capacitor/camera @capacitor/preferences @capacitor/filesystem
==========================================================================
npm install @ionic/pwa-elements

adicionar no main.ts
import { defineCustomElements } from '@ionic/pwa-elements/loader';

defineCustomElements(window);
=============================
ng add @angular/pwa
Yes
===
ionic build --prod
==================
no home.page.html
apagar tudo que esta dentro do content e adicionar
<ion-fab vertical="bottom" horizontal="end" slot="fixed">
    <ion-fab-button color="success">
      <ion-icon name="camera"></ion-icon>
    </ion-fab-button>
  </ion-fab>
============
Apagar o @media do variables.scss
=================================
ionic g service services/foto
=============================
no foto.service.ts
import { Injectable } from '@angular/core';
import {Camera, CameraResultType, CameraSource, Photo} from '@capacitor/camera';
import { Filesystem, Directory } from '@capacitor/filesystem';
import { Preferences } from '@capacitor/preferences';
import { Foto } from '../models/Foto.interface';
import { Platform } from '@ionic/angular';
import { Capacitor } from '@capacitor/core';
=====================================================
criar nova pasta no app com o nome models
criar novo arquivo dentro da pasta models com o nome Foto.interface.ts
=======================================================================
adicionar no Foto.interface.ts
export interface Foto {
  filepath: string;
  webviewPath?: string;
}
==============================================================================
adicionar dentro do export class FotoService do foto.service.ts
  fotos: Foto[] = [];
  private FOTO_ARMAZENAMENTO: string = 'fotos';
===============================================================================
alterar o construtor do foto.service .ts e o restante logo abaixo
constructor(private platform: Platform) { }

public async carregarFotosSalvas() {
    const listaFotos = await Preferences.get({ key: this.FOTO_ARMAZENAMENTO });
    this.fotos = JSON.parse(listaFotos.value as string) || [];

    if (!this.platform.is('hybrid')) {
      for (let foto of this.fotos) {
        const readFile = await Filesystem.readFile({
          path: foto.filepath,
          directory: Directory.Data,
        });

        foto.webviewPath = `data:image/jpeg;base64,${readFile.data}`;
      }
    }
  }

  public async tirarFoto() {
    const fotoCapturada = await Camera.getPhoto({
      resultType: CameraResultType.Uri, // dados baseados em arquivos; oferece o melhor desempenho
      source: CameraSource.Camera, // tirar automaticamente uma nova foto com a câmera
      quality: 50,
    });

    const salvarArquivoFoto = await this.salvarFoto(fotoCapturada);

    this.fotos.unshift(salvarArquivoFoto);

    Preferences.set({
      key: this.FOTO_ARMAZENAMENTO,
      value: JSON.stringify(this.fotos),
    });
  }

  private async salvarFoto(foto: Photo) {
    const base64Data = await this.readAsBase64(foto);

    const nomeArquivo = new Date().getTime() + '.jpeg';
    const arquivoSalvo = await Filesystem.writeFile({
      path: nomeArquivo,
      data: base64Data,
      directory: Directory.Data,
    });

    if (this.platform.is('hybrid')) {
      return {
        filepath: arquivoSalvo.uri,
        webviewPath: Capacitor.convertFileSrc(arquivoSalvo.uri),
      };
    } else {
      return {
        filepath: nomeArquivo,
        webviewPath: foto.webPath,
      };
    }
  }

  private async readAsBase64(foto: Photo) {
    if (this.platform.is('hybrid')) {
      const arquivo = await Filesystem.readFile({
        path: foto.path as string,
      });

      return arquivo.data;
    } else {
      const resposta = await fetch(foto.webPath!);
      const blob = await resposta.blob();

      return (await this.convertBlobToBase64(blob)) as string;
    }
  }

  public async deletePicture(foto: Foto, posicao: number) {
    this.fotos.splice(posicao, 1);

    Preferences.set({
      key: this.FOTO_ARMAZENAMENTO,
      value: JSON.stringify(this.fotos),
    });

    const nomeArquivo = foto.filepath.substr(foto.filepath.lastIndexOf('/') + 1);
    await Filesystem.deleteFile({
      path: nomeArquivo,
      directory: Directory.Data,
    });
  }

  convertBlobToBase64 = (blob: Blob) =>
    new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onerror = reject;
      reader.onload = () => {
        resolve(reader.result);
      };
      reader.readAsDataURL(blob);
    });

}
========================================================
Adicionar dentro do home.page.ts
import { ActionSheetController } from '@ionic/angular';
import { Foto } from '../models/Foto.interface';
import { FotoService } from '../services/foto.service';

export class HomePage {
  constructor(public fotoService: FotoService, public actionSheetController: ActionSheetController) { }
  async ngOnInit(){
    await this.fotoService.carregarFotosSalvas();
}
public async showActionSheet(foto: Foto, position: number) {
  const actionSheet = await this.actionSheetController.create({
    header: 'Fotos',
    buttons: [{
      text: 'Delete',
      role: 'destructive',
      icon: 'trash',
      handler: () => {
        this.fotoService.deletePicture(foto, position);
      }
    }, {
      text: 'Cancelar',
      icon: 'close',
      role: 'cancel',
      handler: () => {
        //nothing to do, action sheet is automatically closed
      }
    }]
  });
  await actionSheet.present();
}

tirarFoto() {
  this.fotoService.tirarFoto();
}
}
============================================================
Adicionar dentro do home.page.html
<ion-content [fullscreen]="true">
  <ion-grid>
    <ion-row>
      <ion-col size="6" *ngFor="let photo of fotoService.fotos; index as position">
        <ion-img [src]="photo.webviewPath" (click)="showActionSheet(photo, position)"></ion-img>
      </ion-col>
    </ion-row>
  </ion-grid>

  <ion-fab vertical="bottom" hotizontal="end" slot="fixed">
    <ion-fab-button (click)="tirarFoto()">
      <ion-icon name="camera"></ion-icon>
    </ion-fab-button>
  </ion-fab>

</ion-content>
================================
adicionar no package.json
na linha 25
"@azure/cognitiveservices-computervision": "^8.2.0",
    "@azure/cognitiveservices-face": "^5.0.0",
    "@azure/ms-rest-azure-js": "^2.1.0",

na linha 36
"uuid": "^9.0.0",
=====================
no cmd
ionic g service services/ai
===========================
colocar no ai.services.ts

import { Injectable } from '@angular/core';
import { ComputerVisionClient } from "@azure/cognitiveservices-computervision";
import { CognitiveServicesCredentials } from "@azure/ms-rest-azure-js";
import { FaceClient } from "@azure/cognitiveservices-face";

@Injectable({
  providedIn: 'root'
})
export class AiService {

  private APIKEY = '';
  private ENDPOINT = '';

  constructor() { }

  async descreverImagem(foto: Blob) {
    const cognitiveServiceCredentials = new CognitiveServicesCredentials(this.APIKEY);
    const client = new ComputerVisionClient(cognitiveServiceCredentials, this.ENDPOINT);

    return await client.describeImageInStream(foto, { language: 'pt' }).then(retorno => {
      console.log('Descrever Imagem: ', retorno);

      return {
        descricao: retorno.captions ? retorno.captions[0].text : "",
        confianca: retorno.captions ? retorno.captions[0].confidence : "",
        tags: retorno.tags ? retorno.tags : [],
        tipo: 'descrever'
      }
    });
  }

  async tagsImagem(foto: Blob) {
    const cognitiveServiceCredentials = new CognitiveServicesCredentials(this.APIKEY);
    const client = new ComputerVisionClient(cognitiveServiceCredentials, this.ENDPOINT);

    return await client.tagImageInStream(foto, { language: 'pt' }).then(retorno => {
      console.log('Tags Imagem: ', retorno);

      return {
        tags: retorno.tags,
        tipo: 'tags'
      }
    });
  }

  async deteccaoFacial(foto: Blob) {
    const cognitiveServiceCredentials = new CognitiveServicesCredentials(this.APIKEY);
    const client = new FaceClient(cognitiveServiceCredentials, this.ENDPOINT);

    return await client.face.detectWithStream(foto,
      {
        detectionModel: 'detection_01',
        recognitionModel: 'recognition_04',
        returnFaceAttributes: ['age', 'gender', 'headPose', 'smile', 'facialHair', 'glasses', 'emotion', 'hair',
          'makeup', 'occlusion', 'accessories', 'blur', 'exposure', 'qualityForRecognition']
      }
    ).then(retorno => {
      console.log('Detecção de Face: ', retorno);

      return retorno.map(face => ({
        atributos: face.faceAttributes,
        posicao: face.faceRectangle,
      }));
    });
  }



}
============================================
colocar a sua propria private APIKEY = ''; e no private ENDPOINT = '';
===========================================
adicionar no foto.services.ts
 async getBlob(foto: Foto) {
    // Busca o arquivo no File System
    const file = await this.readFile(foto);
    // Converte o arquivo para Blob
    const response = await fetch(file);
    // Retorna o Blob
    return await response.blob();
  }

  private async readFile(foto: Foto) {
    // If running on the web...
    if (!this.platform.is('hybrid')) {
      // Display the photo by reading into base64 format
      const readFile = await Filesystem.readFile({
        path: foto.filepath,
        directory: Directory.Data,
      });

      // Web platform only: Load the photo as base64 data
      foto.webviewPath = `data:image/jpeg;base64,${readFile.data}`;
    }

    return foto.webviewPath as string;
  }
============================
no npm i
ionic g page modal

ionic g page faceModal
=======================================
nos imports do home.page.ts
import { Component, ComponentRef } from '@angular/core';
import { FotoService } from '../services/foto.service';
import { Foto } from '../models/Foto.interface';
import { ActionSheetController, ModalController } from '@ionic/angular';
import { AiService } from '../services/ai.service';
import { LoadingController } from '@ionic/angular';
import { ModalPage } from '../modal/modal.page';
import { FaceModalPage } from '../face-modal/face-modal.page';

mudar o construtor
constructor(
    public fotoService: FotoService,
    public actionSheetController: ActionSheetController,
    public aiService: AiService,
    private loadingController: LoadingController,
    public modalController: ModalController
  ) {}

mudar os buttons para
      buttons: [
        {
          text: 'Descrever a imagem',
          icon: 'eye',
          handler: () => {
            this.detalhesImagem(foto);
          },
        },
        {
          text: 'Objetos na Imagem',
          icon: 'pricetags',
          handler: () => {
            this.tagsImagem(foto);
          },
        },
        {
          text: 'Análise facial',
          icon: 'person-circle',
          handler: () => {
            this.deteccaoFacial(foto);
          },
        },
        {
          text: 'Delete',
          role: 'destructive',
          icon: 'trash',
          handler: () => {
            this.fotoService.deletePicture(foto, position);
          },
        },
        {
          text: 'Cancelar',
          icon: 'close',
          role: 'cancel',
          handler: () => {
            // Nothing to do, action sheet is automatically closed
          },
        },
      ],

=====================================================
no modal.page.ts
import { Component, Input, OnInit } from '@angular/core';
import { ModalController } from '@ionic/angular';

@Component({
  selector: 'app-modal',
  templateUrl: './modal.page.html',
  styleUrls: ['./modal.page.scss'],
})
export class ModalPage implements OnInit {

  // Dados que vieram por parâmetro do componentProps
  @Input() descricao: string = '';
  @Input() confianca: string = '';
  @Input() tags: string[] = [];
  @Input() tipo: string = '';

  constructor(public modalController: ModalController) { }

  ngOnInit() {
  }

  async closeModal() {
    await this.modalController.dismiss();
  }

}
=============================
no modal.page.html
<ion-header [translucent]="true">
  <ion-toolbar>
    <ion-title>Dados da IA</ion-title>
  </ion-toolbar>
</ion-header>

<ion-content [fullscreen]="true">

  <ion-card>
    <ion-card-header>
      <ion-card-title>{{ tipo === 'descrever' ? 'Descrição da Imagem' : 'Objetos na Imagem' }}</ion-card-title>
    </ion-card-header>
    <ion-card-content *ngIf="tipo === 'descrever'">
      {{descricao}} <br>
      <strong>Confiança: </strong>
      <ion-badge class="direita">
        {{confianca}}
      </ion-badge>
    </ion-card-content>

    <ion-item *ngFor="let item of tags" lines="full">
      <ion-label>{{item | titlecase}}</ion-label>
    </ion-item>
  </ion-card>

</ion-content>
=========================================
no home.page.ts apos os buttons
  async detalhesImagem(foto: Foto) {
    const loading = await this.loadingController.create({
      message: 'Analisando...',
    });
    await loading.present();

    const detalhes = await this.aiService.descreverImagem(
      await this.fotoService.getBlob(foto)
    );

    console.log(detalhes);
    await loading.dismiss();

    this.abrirModal(ModalPage, detalhes);
  }

  async tagsImagem(foto: Foto) {
    const loading = await this.loadingController.create({
      message: 'Analisando...',
    });
    await loading.present();

    const tags = await this.aiService.tagsImagem(
      await this.fotoService.getBlob(foto)
    );
    console.log(tags);
    await loading.dismiss();
    this.abrirModal(ModalPage, tags);
  }

  async deteccaoFacial(foto: Foto) {
    const loading = await this.loadingController.create({
      message: 'Analisando...',
    });
    await loading.present();

    const faces = await this.aiService.deteccaoFacial(
      await this.fotoService.getBlob(foto)
    );
    console.log(faces);
    await loading.dismiss();
    this.abrirModal(FaceModalPage, faces);
  }

  async abrirModal(pagina: any, variavel: any) {
    const modal = await this.modalController.create({
      component: pagina,
      componentProps: variavel,
    });
    return await modal.present();
  }
}
